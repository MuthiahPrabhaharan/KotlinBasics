//In, below code we used to define function named colorMix() in that we passed two colours as Set of Constants...
//Here, we are using Set of Colours Constant as branch(condition) checking values once the run condition is satisfied it will return that particular result...
//In, Kotlin there is no need to Use break statements inside When unlike Switch in Java...
//Kotlin, used to Smart Cast(automatically identify) the condition satisfied value and return the result...
import Colours.*
fun colorMix(c1:Colours,c2:Colours) =
 //In, below code im just give Set of colors Constant as branch(condition) value like that we can also pass a List of values or normal values etc., that is much possible in Kotlin...
 //So, as a branch condition we can pass anything (or) any expressions for 'when' in Kotlin as shown below...
 //We, can also use 'when' without any arguments or with some arguments it's much possible in Kotlin...
    when(setOf(c1,c2)){
        setOf(ORANGE,YELLOW) -> RED // No break is needed...
        setOf(BLUE,GREEN) -> ORANGE  // No break is needed...
        setOf(WHITE,PURPLE) -> MAGENTA // No break is needed...
       // else -> throw Exception("No Colours!")
        else -> println("No Colours!")
}
/*
Above, 'when' code has been written in Java using 'switch' by doing several modifications as shown below...
Here, the break statement are mandatory (or) otherwise it will print un-expected results...
  switch (color){
           case ORANGE:
               System.out.println("BLUE,GREEN");
               break; // Break is needed...
           case RED:
               System.out.println("ORANGE,YELLOW");
               break; // Break is needed...
           case MAGENTA:
               System.out.println("WHITE,PURPLE");
               break; // Break is needed...
           default:
               System.out.println("No Colours!");
       }
 */
//In, below code we just used to define an enum class named Colours...
//Enum is a Class which has only Constants(Permanent Values) in it...
//We can also say like this Enum is a Class which holds a group of Constants in it...
enum class Colours{
    //Here, the RED,GREEN etc., these are the constants that present inside the Colours enum class...
    RED,BLUE,GREEN,YELLOW,MAGENTA,WHITE,ORANGE,PURPLE
    //Above, things are called as a group of constants...
}
fun main(){
    //It, will return the result of particular color after the mix of two colors as shown below...
    println(colorMix(ORANGE,YELLOW))
    println(colorMix(BLUE,GREEN))
    colorMix(YELLOW,BLUE)
    colorMix(GREEN,WHITE)
    println()
    /*
    Pet().getPet(Dog())
    Pet().getPet(Cat())
    Pet().getPet(Pet())
    */
   // println(Pet().pet)
    /*
    val pet = getMyFavouritePet(Dog())
    pet
    println(getMyFavouritePet(Cat()))
    println(getMyFavouritePet(Pet()))
     */
    //Here, im calling that function named getMyFavouritePet() it holds that checking type by using 'when' condition...
    getMyFavouritePet(Dog())
    getMyFavouritePet(Pet())
    println()
    getName(17)
}
//Below, function is a checking type it's just used to check which specific subtype will be given in an argument as value...
fun getMyFavouritePet(pet: Pet) =
     //   fun getPet(pet: Pet) =
      //Below, code contains the logic of how to check the type of Pet by using 'when' condition...
    //Here, the Pet can be Dog or Cat or nothing it will be decided according to the values that has been passed inside that branch(check) condition of that getMyFavouritePet() function...
    //If, we pass Dog() as a value parameter then it will do Smart Cast and return that Dog oriented particular result...
    //If, we pass Cat() as a value parameter then it will do Smart Cast and return that Cat oriented particular result...
    //If, we pass Pet() as a value parameter then it will return 'No Pet is identified!' as shown below...
            when (pet) {
                //Here, 'is' in Kotlin is used to check whether an argument is of a specific type like this subtype or that subtype...
                is Dog -> pet.woof() // -> Smart Cast!
                is Cat -> pet.meow() // -> Smart Cast!
                else -> println("No Pet is identified!")
            }
//    }
    /*
    val pet = getMyFavouritePet(Dog())
    fun getMyFavouritePet(pet: Pet){
        when(pet){
        // 'is' in Kotlin = 'instanceOf' in Java ok...
        //In java, the smart cast is not possible but in kotlin it's very much possible...
        //Here, kotlin smart cast '((Dog) pet).woof()' as 'pet.woof()' as shown below..
            is Dog -> pet.woof()
            is Cat -> pet.meow()
            else -> println("No Pet is identified!")
        }
    }*/
//In, below code im just declared non-final class named Pet ok...
//In, kotlin by default every class we declare is just a final(immutable) class ok...
//To, declare a non-final class we need to explicitly specify the open modifier before the class keyword as shown below...
//Now, the Pet class is a non-final(mutable) class in Kotlin & we can inherit this by using the concept of inheritance...
open class Pet {

}
//And, im just used to inherit the Pet(Parent) Class to the Dog(Child) Class that has been shown below...
//Below, the Dog class is just a final(immutable) class coz we don't specify open modifier here...
class Dog : Pet() {
    fun woof(): Unit {
        println("My favourite pet name is 'Motu!' & he is a Dog!")
    }
}
//And, im just used to inherit the Pet(Parent) Class to the Cat(Child) Class that has been shown below...
//Below, the Cat class is just a final(immutable) class coz we don't specify open modifier here...
class Cat : Pet() {
    fun meow() {
        println("My favourite pet name is 'Kio!' & he is a Cat!")
    }
}
fun getName(no:Int){
    /*
    We can define 'when' like this as shown below...
    var no = 17
    when(no){
        no -> println("Mr.360")
        else -> println("Superman")
    }
    */
    //To, be more 'Kotlinish' above code is just modified and we declared a variable inside the 'when' branch(condition) ok...
    when(val no = 17){
        no -> println("Mr.360")
        else -> println("Superman")
    }
}
