//Here, we will see about variables & variables types in Kotlin...
//In, Kotlin we have two types in variables they are val & var...
//val type means it's immutable or non-modifiable variable...
//var type means it's mutable or modifiable variable...
//In, Kotlin only reference type(Wrapper Class Type) is available for variables like val & var...
//Kotlin, also have a value type(primitive type) for variables.But, it will always act as a reference type...
fun main(){
    val name:String = "Muthiah"
    //Below, code throws an error coz val variable type can't be re-initialized...
   // name = "Muthiah Prabhaharan"
    var age:Int = 23
    //Below, code not throws any error coz its var variable type it can be re-initialized...
    age = 24
    //I'm just used a String Template for below code...
    //Coz, in Kotlin String Concatenation was replaced by String Templates...
    println("My name is $name & i'm $age years old!")
    //In, below code we just explicitly defined the type for those two variables named color & feet...
    //It's always recommended to specify type explicitly for variables in Kotlin to avoid confusions among them...
    //val type in Kotlin is equals to final variable type in Java...
    val color:String = "Black"
    var feet:Int = 6
    //However, if we don't specify a type for variables then Kotlin compiler will automatically assign(infers) type for the variables according to the values we put for any variables...
    //In, below code we don't specify a type for both sun & star variables...
    //But, the Kotlin Compiler will automatically assign type for those variables according to the values we store in that...
    //Below, both sun & star variables are inferred(value type automatically specified by Kotlin Compiler)...
    val sun = "Red"
    var star = 1000
    println("A $star rupees note is $sun!")
    //In, below code we just alter the Objects that presents inside a list ok...
    //val type does not have any relation with Object & it's content that stored in val variable...
    //In, val type re-initialization is not only possible.But, we can alter the Object Content stored in a val reference variable type...
    //Below, code we modify the mutableList variable's Object content it's not throws any error...
    //We, can't only re-initialize mutableList variable that's all...
    val mutableList = mutableListOf("Java","Python","Ruby")
    mutableList.add(1,"Kotlin")
    mutableList.add("Scala")
    println(mutableList)
    println()
    //Below code, we can't alter any object content coz list type is immutable...
    //So, for immutable list type we can't alter object contents...
    //But, for mutable list type we can alter object contents as shown in above code...
    val readOnlyList = listOf("Red","Blue","Green")
    //readOnlyList.add("Yellow")
    //readOnlyList.add(1,"Black")
    println(readOnlyList.get(0))
    println(readOnlyList[2])
    println(readOnlyList)
    val int = 10
    val char = 'A'
    println("$int->$char")
    val boolean = true
    println(boolean)
}
//We can define main() function(method) with args or without any args it's much possible in Kotlin...
//A main() function or method with argument...
fun main(args: Array<String>){
    //Here, we can assign if result to both variable & functions(methods) as shown below...
    val name = if(args.isNotEmpty()) "Something!" else "Nothing!"
    println("Hello,$name")
    println()
    //Two variable types in kotlin known as val & var...
    //Val variable it's an Immutable(non-modifiable) type...
    //Once a value is assigned on val variable it can't be re-initialized as shown below...
    //No Setters for val one & only Getters are available...
    val no = 17
    // no = 18 -> Error coz val is immutable variable...
    println(no)
    //Now, we will see about var variable it's a mutable(modifiable) variable in Kotlin...
    //In var variable we can re-initialize values at any no of times it's much possible...
    //Both, Getters & Setters are available for var variable type...
    var size = 10
    size = 12 // -> No Error coz var is mutable variable...
    println(size)
}
