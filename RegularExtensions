//Here, we are going to see about some regular(default) extension functions that are available in Kotlin...
//Regular(actual) extension functions means that functions that are available in Standard library of Kotlin ok...
//In, Kotlin default extension function is also known as regular or standard extension function ok...
//Kotlin provides a lot of regular(default) extension function that supports Kotlin SDK...
//Kotlin SDK = Java JDK + Bunch Of Extensions in Kotlin...
//So, the interoperability(connection) between Kotlin code to Java code is very simple they provide great interaction between while performing operations...
//For example, the String Class in Kotlin is actually a java.lang.String Class only...
package stdext
fun main(){
//In, below code we used to illustrate some Standard Collection Classes that present in Java by using some Kotlin default functions like arrayListOf(),hashMapOf() etc.,
    //In, kotlin the Java Standard Collection Classes are implemented in under the hood(at the byte code level) ok...
    //If, we creates a collection by using Kotlin SDK then instances(examples) of Java Standard Collection Classes are created at byte code level ok...
    val list = arrayListOf("ab","cd","ef","gh","ij")
    val set = hashSetOf("srt","klr","vtk","rhs","sky")
    val map = hashMapOf("VTK" to 18,
                        "KLR" to 1,
                        "RHS" to 45
                        )
    val srt = "SRT"
//Here, in Kotlin 'javaClass' property is equal to 'set.getClass()' in Java ok...
//In, below code we try to get the Standard Collection Classes in Java by using that 'javaClass' property in Kotlin ok as shown below...
//Now, we can see that Java Standard Collection Classes like ArrayList,HashSet,HashMap are used under the hood(at the byte code level) in Kotlin...
//The output of the below codes are used to define the Standard Collection Classes & it's package from where it's belongs from...
    println(list.javaClass) // O/P : class java.util.ArrayList
    println(set.javaClass)  // O/P : class java.util.HashSet
    println(map.javaClass)  // O/P : class java.util.HashMap
    //Here, using 'javaClass' property we get actual String Class in Java & it's also specifies packages from where it belongs to...
    println(srt.javaClass)  // O/P : class java.lang.String
    //In, above codes we can see the Java Standard Collection Classes as well as String Class & where it's all belongs to from which package like that...
    //Kotlin, SDK is used to simply provides an extension functions for Java Regular Collection and it's Classes ok...
    //Functions like filter(),map(),reduce() etc., these are the extension functions that supports Java Standard Collection Classes...
    //The benefits of Kotlin SDK is small runtime jars & easy interoperability with Java Code that's all...
    //So, using Java Standard Collection & it's Classes are very simple & easy for Kotlin coz of interoperability between them...
    //We, don't need to convert one collection to another collection in Kotlin coz everything is same under the hood...
    //If, we call a Java API from Kotlin (or) Vice-Versa we don't need to do any additional conversions everything is just simply works that's all...
     println(listOf('x','y','z').joinToString(prefix = "[", separator = "", postfix = "]"))
    //The, joinToString() is also an regular(default) extension function in Kotlin library(SDK) & that used to represent a collection elements in nice String representation manner...
    val strAy : Array<String> = arrayOf("abc","lmn","pqr","xyz")
    var strAr = arrayOf("")
    //In, kotlin getOrNull() is also an regular(default) extension function in kotlin that is used to return an actual string value based upon index number or if there is no element present in that index no then it will return null value...
    //But, in Java we only has 'get()' as default extension function but in Kotlin 'getOrNull()' function was introduced and it's implemented as extension of 'get()' function ok...
    println(strAy.getOrNull(2)) // O/P : pqr
    println(strAr.getOrNull(1)) // O/P : null
    //In, kotlin Arrays are nothing they are actually a regular Java Array only...
    //So, we can call both 'get()' & 'getOrNull()' extension function from regular Java array as shown below...
    println(strAy.get(3)) // O/P : xyz
    println(strAy.getOrNull(0)) // O/P : abc
    //We, can also use getOrNull() extension function in list to represent the particular element or null as shown below...
    val lst = listOf("ktm")
    println(lst.getOrNull(0)) // O/P : Ktm
    println(lst.getOrNull(1)) // O/P : null
    //Extension functions are one of the most powerful feature that was present in Kotlin ok...
    val lt = listOf('x','y','z')
    //The, withIndex() is also one of the default extension function in Kotlin...
    //That, is used to represent the list of elements with its index position ok...
    for((index,element) in lt.withIndex()){
        println("$index:$element")
    }
    //The, until() is also one of the default extension function in Kotlin...
    //By, using until() extension function we can define a range(from - to) for anything...
    //Here, below until() function was used for define an Int range ok...
    //We, can use until() function in an 'infix' form by omitting '.'(dot) & '()' parenthesis...
    infix fun Int.until(to:Int) = IntRange
    println(1.until(10)) //Normal Form
    println(1 until 11) // Infix Form
    //In, kotlin "to" is also one of the default extension function & it's used to return values as Pair ok...
    //So, whenever we needed a Pair of Values we can use "to" regular extension function in kotlin as shown below...
    val mp = hashMapOf(17 to "RED",
                       45 to "BLUE",
                       7 to "YELLOW")
    println(mp)
    println("HOT" to "RED") // O/P : (HOT, RED)
    //The, isLetter() is also one of the default extension function in Kotlin...
    //It is used to check whether the given input is character it means will return boolean value as true or not then return false...
    fun Char.isLetter() = this in 'A'..'Z'||this in 'a'..'z'
    //The, isLetterOrDigit() is also one of the default extension function in Kotlin...
    //It is used to check whether the given input is character or number in character it means will return boolean value as true or not then return false...
    fun Char.isLetterOrDigit() = isLetter() || this in '0'..'9'
    println()
    println('M'.isLetter()) // true
    println('m'.isLetter())  // true
    println('H'.isLetterOrDigit()) // true
    println('h'.isLetterOrDigit()) // true
    println('7'.isLetter()) // false
    println('8'.isLetterOrDigit()) // true
    println('$'.isLetter()) // false
    println('#'.isLetterOrDigit()) // false
    println()
    //And, now we are going to see about the regular(default) extension functions that are available for Strings that has been shown below...
    val q = """Keep calm and think
        what are the things
        you have experienced in the past?
    """
    println(q)
    println()
    //In, kotlin both trimMargin() & trimIndent are default extension functions for the String Class...
    //They, are used to crop(cut) the spaces of given String sentences and then used to merge it as shown below...
    val r = """Keep calm and teach
        |to your children what you have 
        |learned about life?
    """.trimMargin()
    println(r)
    println()
    //We, can also use named arguments like marginPrefix for an trimMargin() extension function in kotlin...
    val s = """Keep calm and
        #revise java and then
        #learn Kotlin ok.
    """.trimMargin(marginPrefix = "#")
    println(s)
    println()
    val t = """keep calm and learn
        kotlin and do practice in
        kotlin and then repeat!!!
    """.trimIndent()
    println(t)
    println()
    //In, kotlin toRegex() is also one of the regular extension function...
    //It is used to convert a String expression into regular expression value & validate it's by using matches() function in kotlin...
    //If the given expression is matched mean then it will return true or otherwise false...
    val rgx = "\\d{2}\\.\\d{2}\\.\\d{4}".toRegex()
    println(rgx.matches("07.08.2022")) // true
    println(rgx.matches("07.09.22")) // false
    //Below, is regular expression in kotlin by using a String triple quotes it's more convenient & it makes that expression shorter than above regular expression...
    val rgex = """\d{2}\.\d{2}\.\d{4}""".toRegex()
    println(rgx.matches("09.08.2022")) // true
    println(rgx.matches("08.10.22")) // false
    println()
    //Here, toInt() is default extension function for converting a given String to Int as shown below...
    //Here, toIntOrNUll() is default extension functions for converting a given String to Int as shown below if Int present in String form means then print that or it will print null as shown below...
    println("17".toInt()) // 17
    println("3.60".toDouble()) // 3.60
    println("ab".toIntOrNull()) // null
    //Here, toDouble() is default extension function for converting a given String to Double as shown below...
    //Here, toIntOrNUll() is default extension functions for converting a given String to Double as shown below if Double present in String form means then print that or it will print null as shown below...
    println("35.6".toDoubleOrNull()) // 35.6
    println("uv".toDoubleOrNull()) // null
    //println("gh".toInt()) // NFE!
    println()
    //In, kotlin eq is not one of the extension function as shown below...
    //It's just used to check whether the given input is correct or not ok...
    //If given input is correct then it will print Ok! (or) otherwise Not! that's all...
    //It, just check whether the given argument is equal to the receiver(function) or not ok...
    fun getAb() = 17
    getAb() eq 17 // Ok!
    getAb() eq 45 // Not!
    getAb() eq 18 // Not!
    getAb() eq 17 // Ok!
}
//We just declare an eq extension function here...
infix fun<T> T.eq(other:T){
  if (this == other) println("Ok!")
    else println("Not!")
}
