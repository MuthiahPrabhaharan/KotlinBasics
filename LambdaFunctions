//Here, we are going to see about lambda function of Functional Programming in Kotlin ok...
package lfn
fun main(){
    //In, Kotlin lambda function is also known as an anonymous function ok...
    //A function which has no name then it is known as an anonymous function...
    //Here, in Kotlin we put lambda function only inside the curly braces{} ok...
    //Here, below 'z' is a lambda function ok...
    val z = {x:Int,y:Int -> x + y} // Lambda Function Expression...
    println("Add Total = ${z(17,18)}")
    //Like that, 'l' is also a lambda function ok...
    val l = {m:Int,n:Int -> m * n}
    println("Multiplication of 10 * 10 = ${l(10,10)}")
    val k = {i:Int,j:Int -> i / j}
    println("Division of 35 / 7 = ${k(35,7)}")
    val c = {a:Int,b:Int -> b - a}
    println("Subtraction of 1235 - 657 = ${c(657,1235)}")
    val r = {p:Int,q:Int -> p % q}
    println("Modulo of 235 % 4 = ${r(235,4)}")
    println()
    /*
    val callAlpha = alpha {1000}
    println("Calling an Lambda Function named Alpha = $callAlpha")
     */
    val list = listOf(5,10,15)
    //We, can use lambda function inside any functions in kotlin as shown below...
    //We, can also take out lambda function from that function parenthesis() if that lambda function is the last one...
    //And, we can omit that function parenthesis() completely if that particular function doesn't have any arguments...
    //Here, 'it' is used when there is one & only argument for that particular function in Kotlin as shown below...
    println(list.any({i -> i > 7})) // true
    println(list.filter(){i -> i > 10}) // [15]
    println(list.find { it -> it == 10 }) // 10
    println()
    val set = setOf(2,4,6,8)
    println(set.any({i -> i % 2 == 0})) // true
    println(set.find(){it -> it == 6}) // 6
    println(set.filter {it -> it % 2 == 1}) // []
    println()
    //Below, one is called multi-line lambda function...
    list.any{
        println("Processing $it") // Processing 5
        it > 0
    }
    set.filter {
        println(it % 2 == 0) // true x 5
        it > 0
    }
    set.find {
        println(it % 2 != 0) // false
        it > 0
    }
    list.any{
        println("The number above 0 is $it") // 5
        it > 0
    }
    println()
    val map = mapOf(17 to "ABD",
                   10 to "SRT",
                    45 to "RHS")
    //Here, below its known as Destructing Declarations in Kotlin...
    println(map.mapValues { entry -> " ${entry.key} -> ${entry.value}" })
    println()
    //Destructing Declarations Syntax is below & it is used to iterate over all the elements that present inside a map by using for loop...
    //We, can use destructing declarations when Pair(k,v) of values needs to be iterated...
    println(map.mapValues { (key,value) -> "$key -> $value" })
    println()
    println(map.mapValues {(_,value) -> "$value" })
    println()
    println(map.mapValues {(key,_) -> "$key"})
    println()
    println(map.mapKeys {(key,value) -> "$key:$value"})
    println()
    val lst = listOf(1,3,5,7,9)
    println(lst.filter {it -> it % 2 != 0})
    val mp = mapOf(2 to "Two",3 to "Three",4 to "Four")
    println(mp.mapKeys {it})
    println(lst.any {it -> it % 5 == 0})
    println(lst.any { it -> it % 3 == 0 })
    println(lst.find { it -> it % 9 == 0 })
    println(lst.find { it -> it % 3 == 0 })
    println(lst.first { it -> it % 7 == 0 })
    //println(lst.first { it -> it % 2 == 0 }) // Exception
    println(lst.firstOrNull { it -> it % 4 == 0 })
    println(lst.count { it -> it % 3 == 0 })
    println(lst.count { it -> it % 2 != 0 })
    println(lst.count{ it -> it % 2 == 0 })
    println(lst.partition { it -> it % 3 == 0 })
    println(lst.partition { it -> it % 7 != 0 })
    println(lst.associate { 'a' + it to 10 * it })
    val lx = listOf('a','b','c','d','e','f','g','h','i')
    val ly = listOf(1,2,3,4,5,6)
    println(lx.zip(ly))
    println()
    println(lx.zipWithNext())
    println(ly.zipWithNext())
}
/*
fun alpha(x:() -> Int): () -> Int {
    return x
}
 */

