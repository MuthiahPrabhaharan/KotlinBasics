//Now, in Kotlin we will move to see default(in-built) arguments & named arguments ok...
//Below, code we have joinToString() function it's one of the default(in-built) functions in Kotlin to write the given thing according to our need...
//In, that joinToString() function there is prefix,separator & postfix these are known as named arguments in Kotlin...
//Here, joinToString() = default(in-Build) function(method) ok...
//And, prefix,separator,postfix = named arguments(function variables) ok...
//So, here the joinToString() function have three named arguments(the variables of function which having their own names) like prefix,postfix etc., these are called as named args...
fun main(){
    val list = listOf('a','b','c').joinToString(prefix = "[", postfix = "]", separator = "")
    println(list) // O/P = [abc]
    //In, below code im not specified prefix & separator ok...
    //And, im used only postfix named args and specified as dot(.) ok...
    //Here, by default the prefix is specified as empty string("") and the separator is specified as comma(,) by default in these named arguments...
    var nos = listOf(1,2,3).joinToString(postfix = ".")
    println(nos) // O/P = 1, 2, 3.
    val ktm = listOf('K','T','M').joinToString(separator = "~")
    println(ktm) // O/P = K~T~M
    //Here, below the joinToString() default function is used to display the list of contents according to our need that means in our convenient way...
    val sta = listOf("STA").joinToString(prefix = "#")
    println(sta) // O/P = #STA
    //Like, how the prefix,separator,postfix are used within the joinToString() function as shown below...
    var train = listOf("SuperFast","Express","Local").joinToString(
        prefix = "(", separator = ">", postfix = ")"
    )
    println(train) // O/P = (SuperFast>Express>Local)
    //In, kotlin we will always use a named arguments within the default arguments ok...
    var num = listOf(1,2,3).joinToString(
        postfix = ",....n"
    )
    println(num) // O/P = 1, 2, 3,....n
    println()
    //Below, the displayCharacter() is a local function in that there is two arguments ok...
    //In, that arguments we pass a values like '*' and 10 by default means then it is known as default values in functions ok...
    //So, below '*' and 10 are default values for that displayCharacter local function in Kotlin...
    fun displayCharacter(char:Char = '*',size:Int = 10){
        repeat(size){
            print(char)
        }
    }
    //Here, the calling of local function is happened inside from a top level function...
    //Overloading is happened below by using named arguments & named values of that displayCharacter function...
    displayCharacter()
    println()
    displayCharacter('#')
    println()
    displayCharacter('$',15)
    println()
    //In, kotlin there is no implicit(default) conversion from Int to Char or Vice Versa(Char to Int) like Java ok...
    //If, we need to convert an Int to Char or Vice Versa then we only explicitly(manually) convert that by using .toChar() and .toInt() default(in-build) functions ok...
    //And, we can't pass an Int value in Char value place and Vice Versa ok.So, the below code throws an error...
    //Below, changed the function parameters doesn't work in Kotlin...
    //displayCharacter(5,'5') = error...
    //But, by using the named arguments we can pass an Int value in Char value place and Vice Versa and now the error will not be thrown as above...
    //But, here changed the function parameters it just works with the help of named arguments in Kotlin...
    displayCharacter(size = 5, char = '7') // = No error...
    println()
    println()
    fun sum(x:Int,y:Int,z:Int) = x + y + z
    val total = sum(23,59,971)
    /*
    //Below, codes contains an error coz overloading of that sum() local function is not possible...
    sum(17,18) error
    sum(10)   error
    sum()    error
     */
    println("Total = $total")
}
