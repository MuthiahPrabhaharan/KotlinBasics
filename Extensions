//Here, we are going to see about extension functions in Kotlin...
//Extension functions means if we define a customized function then it's known as an extension function...
//User creates their own function according to their need for their particular Class then it is known Extension(user define) functions in Kotlin...
//Extension functions are always a regular static function in Kotlin under the hood(at byte code level)...
//If, we want to call an extension function from Java then we need to use normal import statement or static import statement that is mandatory...
//Coz, without any import we can't access an extension function from Java Class it's not possible...
package ext
//Here, below we used to create an extension function named lastChar() for the String Class that is used to return the last character of the given String content...
//Extension functions are always declare outside the class.But, they can be accessed inside that particular Class as their regular member functions...
//Like, here we defined lastChar() outside the String class only.But, we can access that lastChar() function inside the main() top-level function coz it's visible...
//By, default extension functions cannot be accessed across the whole project directly in Kotlin...
//In, kotlin the class which is used to extend an extension function then it's called as an 'Receiver'...
//If, we want to access an extension function outside the declared file(Class) or across the whole project then we need to explicitly import that extension function or otherwise it's not visible to access...
//In, below code the String Class is a receiver coz that used to extend an extension function named lastChar()...
//The, below code is known as declaration of extension function...
//fun String.lastChar() = this.get(this.length-1)
//To, be more 'Kotlinish' we can omit this reference keyword inside the extension functions as shown below...
fun String.lastChar() = get(length-1)
fun main(){
    //Inside, the same Kotlin file extension function can be accessed anywhere it is very much possible as shown below...
    val nameLastLetter = "prabha".lastChar()
    //Now, it will print last character in the given String named 'prabha' the result would be character 'a'...
    println("The last letter is '$nameLastLetter' ok.")
    var nameFinalCharacter = "muthiah".lastChar()
    println("The final character is '$nameFinalCharacter' ok.")
    println()
    val set = hashSetOf('u','v','w','x','y','z')
    println(set)
    val list = arrayListOf("abc","xyz","ijk","lmn","pqr","uvw")
    println(list)
    val map = hashMapOf(17 to "ABD",
                        10 to "SRT",
                        7 to "MSD")
    println(map)
}
/*
 //In, below code im just calling an extension function of kotlin from Java Class...
//Here, an extension function named lastChar() in Kotlin has been called by Java Class from it's main() method...
//To, access that kotlin extension function we need to import that function as shown below...
//Here, below the normal importing statement that has been declared to access that extension function of Kotlin...
//import ext.ExtnfnKt;
//Insteadof, using normal import we can also use a static import as shown below for access an extension function of Kotlin from Java class...
import static ext.ExtnfnKt.*;
//Above, to import the whole package of extension function we use '.*' or otherwise as that particular function only like in normal import...
public class UsingExtns {
    public static void main(String[] args) {
        /*
        char finalChar = ExtnfnKt.lastChar("muthu");
        System.out.println("The final character is '"+finalChar+"' ok!");
        char lastLetter = ExtnfnKt.lastChar("prabha");
        System.out.println("The last letter is '"+lastLetter+"' ok!");
         */
        char finalChar = lastChar("muthiah");
        System.out.println("The final character is '"+finalChar+"' ok!");
        char lastLetter = lastChar("prabhaharan");
        System.out.println("The last letter is '"+lastLetter+"' ok!");
             System.out.println();
        //In, below code we are called a kotlin extension function named repeat() from Java...
        //But, the method(function) repeat() has defined with single parameter named 'no' as Int type...
        //But, here we gave two parameters known as type of String first & Int second from Java call...
        //Coz, if we are calling an extension function of Kotlin from Java we need to firstly give the parameter value as of that receiver(function) return type then only we need to give actual parameter value as second parameter...
        //In, below code repeat() function has only one Int parameter.But, we called that from Java class ok.So, we need to give one more parameter explicitly as of that receiver(function) type ok.
        //Here, the receiver(function) type is String only.So, we need to give String value as first parameter explicitly then only that Int type parameter value as shown below...
        System.out.println(repeat("AB",5));
        System.out.println(repeatString("KTM",6));
    }
    }
 */
//In, above java code we just used to call this extension function repeat()...
//But, two parameters are passed as value one of String type it's this receiver type & another one is that function actual parameter that's Int type ok...
/*
Here, im just specified a return type of repeat extension function as StringBuilder from String explicitly as shown below...
fun String.repeat(no:Int) : StringBuilder {
    val sb = StringBuilder(no * length)
    for(i in 1..no){
        sb.append(this)
    }
    return sb
}
 */
fun String.repeat(no:Int) : String{
    val sb = StringBuilder(no * length)
    for(n in 1..no){
        sb.append(this)
    }
    return sb.toString()
}
fun String.repeatString(time:Int):String{
    val stBuf = StringBuffer(time * length)
    for (no in 1..time){
        stBuf.append(this)
    }
    return stBuf.toString()
}
//Accessing, the private members of a Class(like String etc.,) inside an extension function from Java Class it's not possible at all...
//The, main benefits of extension functions are we can call them in nicer and more convenient way that's all...
//Extension functions are actually a static function by default(under the hood) at the level of byte code ok...
//In, java we can't access private members of a static function from outside the class ok...
//So, accessing an private members of extension function Class is not possible at all in Java...
//Extension function will not provide any access to their Class private members for anything...
//Extension functions are static(top-level) functions by default in Kotlin & they are declared(created) in separate "Auxiliary(support or extra) Class" in Kotlin at byte code level...
//So, we can't call a private members from extension functions...
//Here, in Kotlin there is no SDK it's actually a combination of Java JDK plus Bunch of Extensions in Kotlin as shown below...
//Kotlin SDK = Java JDK(Standard Libraries) + Bunch Of Extensions in Kotlin that's all...
