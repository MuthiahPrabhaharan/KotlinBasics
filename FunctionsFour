//It is a Kotlin Code...
@file:JvmName("hero")
package best
fun ab() = 17
//It is also a Kotlin Code...
@file:JvmName("good")
package ok
fun kl() = 1
//Below, one is a Java Code that uses above Kotlin Code function named ab()...
//In, kotlin all the top-level functions are static functions(methods) by default...
//So, if we want to call that top-level function from Java class we need to import that as static function as shown below...
//Importation, is same as Java first package name then dot followed by Kotlin File(Class) name then colon...
//import best.CricKt;
//To, be more Kotlinish we can also import in this way as shown below...
//import static best.CricKt.*;
//To, be more n more Kotlinish we can also import in this way by using @JvmName annotation in Kotlin File(Class) as shown below...
import best.hero;
public class KotlinFromJava
{
    public static void main(String[] args) {
        //int no = CricKt.ab();
        //System.out.println("ABD = "+no);
        //To, be more Kotlinish as shown below...
        //System.out.println("Mr.360 = "+ab());
        //To, be more n more Kotlinish as shown below...
        System.out.println("Superman = "+hero.ab());
    }
}
//In, below code im used to import a Kotlin File(Class) in Java Class by using three different approaches...
//In, byte code level(under the hood) the Kotlin File name is changed as Kotlin Class name ok then using that we can Kotlin functions from Java...
//import ok.KlrKt;
//import static ok.KlrKt.*;
import ok.good;
public class UsingKlr {
    public static void main(String[] args) {
        //int no = KlrKt.kl();
        //System.out.println("Kl Rahul = "+no);
        //System.out.println("Kl No = "+kl());
        System.out.println("KLR = "+good.kl());
    }
}
//In, below code im used to define a Java Class and call a Kotlin Code from this Spiral(Java) Class...
//We, can easily call a Kotlin function(method) from Java Class it's very much possible...
//With the help of main() method(function) im used to one Kotlin function specifically...
public class Spiral {
    public static void main(String[] args){
       //Here, the calling of main() function of FunctKt of Kotlin Class(file) that has been done...
       //In, Kotlin the if we don't declare a class then it's fine coz during the call from Java to Kotlin has been made means that time Kotlin File will automatically act as an Kotlin Class...
       //So, below it's just happened im called a main() function from Java Spiral Class main() method and Kotlin file now acts as a Class...
       //By, using this methodology we can run a Kotlin File Or Class from Java Class inside the main() method...
       //Now, the Output will be same for both the FunctKt Kotlin File(Class) & Java Spiral Class...
       //Without any import statement it's much possible we can call Kotlin belongings from Java...
        FunctKt.main();
    }
}

